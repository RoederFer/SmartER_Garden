// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.Data.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace SmartER_Garden_Library.SmartER_Garden_Models
{
    public partial class SmartERGardenContext : DbContext
    {
        public SmartERGardenContext()
        {
        }

        public SmartERGardenContext(DbContextOptions<SmartERGardenContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Eintrag> Eintrag { get; set; }
        public virtual DbSet<EssbarePflanze> EssbarePflanze { get; set; }
        public virtual DbSet<HatEintrag> HatEintrag { get; set; }
        public virtual DbSet<HatZüchter> HatZüchter { get; set; }
        public virtual DbSet<NichtEssbarePflanzen> NichtEssbarePflanzen { get; set; }
        public virtual DbSet<Pflanze> Pflanze { get; set; }
        public virtual DbSet<Standort> Standort { get; set; }
        public virtual DbSet<Züchter> Züchter { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseNpgsql("Server=127.0.0.1;Port=5432;Database=SmartERGarden;User Id=postgres;Password=postgres;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Eintrag>(entity =>
            {
                entity.HasKey(e => e.Eid)
                    .HasName("eintrag_pkey");

                entity.ToTable("eintrag");

                entity.Property(e => e.Eid).HasColumnName("eid");

                entity.Property(e => e.Datum).HasColumnName("datum");

                entity.Property(e => e.Düngerschema)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("düngerschema");

                entity.Property(e => e.Düngertyp)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("düngertyp");

                entity.Property(e => e.Höhe).HasColumnName("höhe");

                entity.Property(e => e.Lichtzyklus)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasColumnName("lichtzyklus");

                entity.Property(e => e.Wasserzufuhr).HasColumnName("wasserzufuhr");

                entity.Property(e => e.Wochenzahl).HasColumnName("wochenzahl");
            });

            modelBuilder.Entity<EssbarePflanze>(entity =>
            {
                entity.HasKey(e => e.Pfid)
                    .HasName("essbare_pflanze_pkey");

                entity.ToTable("essbare_pflanze");

                entity.Property(e => e.Pfid)
                    .ValueGeneratedNever()
                    .HasColumnName("pfid");

                entity.Property(e => e.GeschmackAromen)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("geschmack_aromen");

                entity.Property(e => e.Kalorien).HasColumnName("kalorien");

                entity.Property(e => e.Vitamingehalt)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("vitamingehalt");
            });

            modelBuilder.Entity<HatEintrag>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("hat_eintrag");

                entity.Property(e => e.Eid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("eid");

                entity.Property(e => e.Pfid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("pfid");

                entity.HasOne(d => d.EidNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Eid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hat_eintrag_eid_fkey");

                entity.HasOne(d => d.Pf)
                    .WithMany()
                    .HasForeignKey(d => d.Pfid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hat_eintrag_pfid_fkey");
            });

            modelBuilder.Entity<HatZüchter>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("hat_züchter");

                entity.Property(e => e.Pfid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("pfid");

                entity.Property(e => e.Zid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("zid");

                entity.HasOne(d => d.Pf)
                    .WithMany()
                    .HasForeignKey(d => d.Pfid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hat_züchter_pfid_fkey");

                entity.HasOne(d => d.ZidNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.Zid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("hat_züchter_zid_fkey");
            });

            modelBuilder.Entity<NichtEssbarePflanzen>(entity =>
            {
                entity.HasKey(e => e.Pfid)
                    .HasName("nicht_essbare_pflanzen_pkey");

                entity.ToTable("nicht_essbare_pflanzen");

                entity.Property(e => e.Pfid)
                    .ValueGeneratedNever()
                    .HasColumnName("pfid");

                entity.Property(e => e.Giftigkeit).HasColumnName("giftigkeit");
            });

            modelBuilder.Entity<Pflanze>(entity =>
            {
                entity.HasKey(e => e.Pfid)
                    .HasName("pflanze_pkey");

                entity.ToTable("pflanze");

                entity.Property(e => e.Pfid).HasColumnName("pfid");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("name");

                entity.Property(e => e.OberUnterirdisch)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("ober_unterirdisch");

                entity.Property(e => e.Pflanzbeginn).HasColumnName("pflanzbeginn");

                entity.Property(e => e.Pflanzende).HasColumnName("pflanzende");
            });

            modelBuilder.Entity<Standort>(entity =>
            {
                entity.HasKey(e => e.Stid)
                    .HasName("standort_pkey");

                entity.ToTable("standort");

                entity.Property(e => e.Stid).HasColumnName("stid");

                entity.Property(e => e.Beschreibung)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("beschreibung");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("name");

                entity.Property(e => e.Pfid)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("pfid");

                entity.HasOne(d => d.Pf)
                    .WithMany(p => p.Standort)
                    .HasForeignKey(d => d.Pfid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("standort_pfid_fkey");
            });

            modelBuilder.Entity<Züchter>(entity =>
            {
                entity.HasKey(e => e.Zid)
                    .HasName("züchter_pkey");

                entity.ToTable("züchter");

                entity.Property(e => e.Zid).HasColumnName("zid");

                entity.Property(e => e.Anschrift)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("anschrift");

                entity.Property(e => e.Beschreibung)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("beschreibung");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("name");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}